// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// computeCoxDirection
arma::mat computeCoxDirection(arma::vec& x, int comp, int n_points, int verbose);
RcppExport SEXP _opdesmixr_computeCoxDirection(SEXP xSEXP, SEXP compSEXP, SEXP n_pointsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type comp(compSEXP);
    Rcpp::traits::input_parameter< int >::type n_points(n_pointsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(computeCoxDirection(x, comp, n_points, verbose));
    return rcpp_result_gen;
END_RCPP
}
// getScheffeGaussian
arma::mat getScheffeGaussian(arma::mat& X, int order);
RcppExport SEXP _opdesmixr_getScheffeGaussian(SEXP XSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(getScheffeGaussian(X, order));
    return rcpp_result_gen;
END_RCPP
}
// getDCritValueGaussian
double getDCritValueGaussian(arma::mat& X, int order);
RcppExport SEXP _opdesmixr_getDCritValueGaussian(SEXP XSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(getDCritValueGaussian(X, order));
    return rcpp_result_gen;
END_RCPP
}
// getICritValueGaussian
double getICritValueGaussian(arma::mat& X, int order, int q, arma::mat& W);
RcppExport SEXP _opdesmixr_getICritValueGaussian(SEXP XSEXP, SEXP orderSEXP, SEXP qSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(getICritValueGaussian(X, order, q, W));
    return rcpp_result_gen;
END_RCPP
}
// getOptCritValueGaussian
double getOptCritValueGaussian(arma::mat& X, int order, int q, int opt_crit, arma::mat& W);
RcppExport SEXP _opdesmixr_getOptCritValueGaussian(SEXP XSEXP, SEXP orderSEXP, SEXP qSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(getOptCritValueGaussian(X, order, q, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// mixtureCoordinateExchangeGaussian
Rcpp::List mixtureCoordinateExchangeGaussian(arma::mat X_orig, int order, int n_cox_points, int max_it, int verbose, int opt_crit, arma::mat W);
RcppExport SEXP _opdesmixr_mixtureCoordinateExchangeGaussian(SEXP X_origSEXP, SEXP orderSEXP, SEXP n_cox_pointsSEXP, SEXP max_itSEXP, SEXP verboseSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X_orig(X_origSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type n_cox_points(n_cox_pointsSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(mixtureCoordinateExchangeGaussian(X_orig, order, n_cox_points, max_it, verbose, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// getXsMNL
arma::mat getXsMNL(arma::cube& X, int s);
RcppExport SEXP _opdesmixr_getXsMNL(SEXP XSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(getXsMNL(X, s));
    return rcpp_result_gen;
END_RCPP
}
// getUsMNL
arma::vec getUsMNL(arma::cube& X, arma::vec& beta, int s, arma::mat& Xs);
RcppExport SEXP _opdesmixr_getUsMNL(SEXP XSEXP, SEXP betaSEXP, SEXP sSEXP, SEXP XsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xs(XsSEXP);
    rcpp_result_gen = Rcpp::wrap(getUsMNL(X, beta, s, Xs));
    return rcpp_result_gen;
END_RCPP
}
// getPsMNL
arma::vec getPsMNL(arma::cube& X, arma::vec& beta, int s, arma::mat& Xs);
RcppExport SEXP _opdesmixr_getPsMNL(SEXP XSEXP, SEXP betaSEXP, SEXP sSEXP, SEXP XsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Xs(XsSEXP);
    rcpp_result_gen = Rcpp::wrap(getPsMNL(X, beta, s, Xs));
    return rcpp_result_gen;
END_RCPP
}
// getInformationMatrixMNL
arma::mat getInformationMatrixMNL(arma::cube& X, arma::vec& beta);
RcppExport SEXP _opdesmixr_getInformationMatrixMNL(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(getInformationMatrixMNL(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// getOptCritValueMNL
double getOptCritValueMNL(arma::cube& X, arma::mat& beta_mat, int verbose, int opt_crit, arma::mat& W);
RcppExport SEXP _opdesmixr_getOptCritValueMNL(SEXP XSEXP, SEXP beta_matSEXP, SEXP verboseSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(getOptCritValueMNL(X, beta_mat, verbose, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// findBestCoxDirMNL
arma::cube findBestCoxDirMNL(arma::mat& cox_dir, arma::cube& X_in, arma::mat& beta_mat, int k, int s, double opt_crit_value_best, int verbose, int opt_crit, arma::mat& W);
RcppExport SEXP _opdesmixr_findBestCoxDirMNL(SEXP cox_dirSEXP, SEXP X_inSEXP, SEXP beta_matSEXP, SEXP kSEXP, SEXP sSEXP, SEXP opt_crit_value_bestSEXP, SEXP verboseSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cox_dir(cox_dirSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X_in(X_inSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type opt_crit_value_best(opt_crit_value_bestSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(findBestCoxDirMNL(cox_dir, X_in, beta_mat, k, s, opt_crit_value_best, verbose, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// mixtureCoordinateExchangeMNL
Rcpp::List mixtureCoordinateExchangeMNL(arma::cube X_orig, arma::mat beta_mat, int n_cox_points, int max_it, int verbose, int opt_crit, arma::mat W);
RcppExport SEXP _opdesmixr_mixtureCoordinateExchangeMNL(SEXP X_origSEXP, SEXP beta_matSEXP, SEXP n_cox_pointsSEXP, SEXP max_itSEXP, SEXP verboseSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X_orig(X_origSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_mat(beta_matSEXP);
    Rcpp::traits::input_parameter< int >::type n_cox_points(n_cox_pointsSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(mixtureCoordinateExchangeMNL(X_orig, beta_mat, n_cox_points, max_it, verbose, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// efficiencyCoxScheffeGaussian
double efficiencyCoxScheffeGaussian(double theta, arma::mat& X, int j, int i, int order, int opt_crit, arma::mat& W);
RcppExport SEXP _opdesmixr_efficiencyCoxScheffeGaussian(SEXP thetaSEXP, SEXP XSEXP, SEXP jSEXP, SEXP iSEXP, SEXP orderSEXP, SEXP opt_critSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(efficiencyCoxScheffeGaussian(theta, X, j, i, order, opt_crit, W));
    return rcpp_result_gen;
END_RCPP
}
// BrentCoxScheffeGaussian
List BrentCoxScheffeGaussian(arma::mat& X, int j, int i, int order, int opt_crit, arma::mat& W, double lower, double upper, double tol);
RcppExport SEXP _opdesmixr_BrentCoxScheffeGaussian(SEXP XSEXP, SEXP jSEXP, SEXP iSEXP, SEXP orderSEXP, SEXP opt_critSEXP, SEXP WSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(BrentCoxScheffeGaussian(X, j, i, order, opt_crit, W, lower, upper, tol));
    return rcpp_result_gen;
END_RCPP
}
// BrentGloCoxScheffeGaussian
List BrentGloCoxScheffeGaussian(arma::mat& X, int j, int i, int order, int opt_crit, arma::mat& W, double lower, double upper, double initial_guess, double hessian_bound, double abs_err_tol, double tol);
RcppExport SEXP _opdesmixr_BrentGloCoxScheffeGaussian(SEXP XSEXP, SEXP jSEXP, SEXP iSEXP, SEXP orderSEXP, SEXP opt_critSEXP, SEXP WSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initial_guessSEXP, SEXP hessian_boundSEXP, SEXP abs_err_tolSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type opt_crit(opt_critSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type initial_guess(initial_guessSEXP);
    Rcpp::traits::input_parameter< double >::type hessian_bound(hessian_boundSEXP);
    Rcpp::traits::input_parameter< double >::type abs_err_tol(abs_err_tolSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(BrentGloCoxScheffeGaussian(X, j, i, order, opt_crit, W, lower, upper, initial_guess, hessian_bound, abs_err_tol, tol));
    return rcpp_result_gen;
END_RCPP
}
// banana_xy
double banana_xy(double x, double y);
RcppExport SEXP _opdesmixr_banana_xy(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(banana_xy(x, y));
    return rcpp_result_gen;
END_RCPP
}
// banana_x_y1
double banana_x_y1(double x);
RcppExport SEXP _opdesmixr_banana_x_y1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(banana_x_y1(x));
    return rcpp_result_gen;
END_RCPP
}
// banana_x_y2
double banana_x_y2(double x);
RcppExport SEXP _opdesmixr_banana_x_y2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(banana_x_y2(x));
    return rcpp_result_gen;
END_RCPP
}
// min_banana_x_y1
List min_banana_x_y1(double lower, double upper, double tol);
RcppExport SEXP _opdesmixr_min_banana_x_y1(SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(min_banana_x_y1(lower, upper, tol));
    return rcpp_result_gen;
END_RCPP
}
// minimize_banana_fixed_y
List minimize_banana_fixed_y(double y, double lower, double upper, double tol);
RcppExport SEXP _opdesmixr_minimize_banana_fixed_y(SEXP ySEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(minimize_banana_fixed_y(y, lower, upper, tol));
    return rcpp_result_gen;
END_RCPP
}
// banana_xy2
double banana_xy2(double x, double& y);
RcppExport SEXP _opdesmixr_banana_xy2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(banana_xy2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// minimize_banana_fixed_y2
List minimize_banana_fixed_y2(double& y, double lower, double upper, double tol);
RcppExport SEXP _opdesmixr_minimize_banana_fixed_y2(SEXP ySEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(minimize_banana_fixed_y2(y, lower, upper, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_opdesmixr_computeCoxDirection", (DL_FUNC) &_opdesmixr_computeCoxDirection, 4},
    {"_opdesmixr_getScheffeGaussian", (DL_FUNC) &_opdesmixr_getScheffeGaussian, 2},
    {"_opdesmixr_getDCritValueGaussian", (DL_FUNC) &_opdesmixr_getDCritValueGaussian, 2},
    {"_opdesmixr_getICritValueGaussian", (DL_FUNC) &_opdesmixr_getICritValueGaussian, 4},
    {"_opdesmixr_getOptCritValueGaussian", (DL_FUNC) &_opdesmixr_getOptCritValueGaussian, 5},
    {"_opdesmixr_mixtureCoordinateExchangeGaussian", (DL_FUNC) &_opdesmixr_mixtureCoordinateExchangeGaussian, 7},
    {"_opdesmixr_getXsMNL", (DL_FUNC) &_opdesmixr_getXsMNL, 2},
    {"_opdesmixr_getUsMNL", (DL_FUNC) &_opdesmixr_getUsMNL, 4},
    {"_opdesmixr_getPsMNL", (DL_FUNC) &_opdesmixr_getPsMNL, 4},
    {"_opdesmixr_getInformationMatrixMNL", (DL_FUNC) &_opdesmixr_getInformationMatrixMNL, 2},
    {"_opdesmixr_getOptCritValueMNL", (DL_FUNC) &_opdesmixr_getOptCritValueMNL, 5},
    {"_opdesmixr_findBestCoxDirMNL", (DL_FUNC) &_opdesmixr_findBestCoxDirMNL, 9},
    {"_opdesmixr_mixtureCoordinateExchangeMNL", (DL_FUNC) &_opdesmixr_mixtureCoordinateExchangeMNL, 7},
    {"_opdesmixr_efficiencyCoxScheffeGaussian", (DL_FUNC) &_opdesmixr_efficiencyCoxScheffeGaussian, 7},
    {"_opdesmixr_BrentCoxScheffeGaussian", (DL_FUNC) &_opdesmixr_BrentCoxScheffeGaussian, 9},
    {"_opdesmixr_BrentGloCoxScheffeGaussian", (DL_FUNC) &_opdesmixr_BrentGloCoxScheffeGaussian, 12},
    {"_opdesmixr_banana_xy", (DL_FUNC) &_opdesmixr_banana_xy, 2},
    {"_opdesmixr_banana_x_y1", (DL_FUNC) &_opdesmixr_banana_x_y1, 1},
    {"_opdesmixr_banana_x_y2", (DL_FUNC) &_opdesmixr_banana_x_y2, 1},
    {"_opdesmixr_min_banana_x_y1", (DL_FUNC) &_opdesmixr_min_banana_x_y1, 3},
    {"_opdesmixr_minimize_banana_fixed_y", (DL_FUNC) &_opdesmixr_minimize_banana_fixed_y, 4},
    {"_opdesmixr_banana_xy2", (DL_FUNC) &_opdesmixr_banana_xy2, 2},
    {"_opdesmixr_minimize_banana_fixed_y2", (DL_FUNC) &_opdesmixr_minimize_banana_fixed_y2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_opdesmixr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
